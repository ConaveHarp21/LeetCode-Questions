Given a string s, return the maximum number of unique substrings that the given string can be split into.
You can split string s into any list of non-empty substrings, where the concatenation of the substrings forms the original string. However, you must split the substrings such that all of them are unique.
A substring is a contiguous sequence of characters within a string.
Example 1:
Input: s = "ababccc"
Output: 5
Explanation: One way to split maximally is ['a', 'b', 'ab', 'c', 'cc']. Splitting like ['a', 'b', 'a', 'b', 'c', 'cc'] is not valid as you have 'a' and 'b' multiple times.
Example 2:
Input: s = "aba"
Output: 2
Explanation: One way to split maximally is ['a', 'ba'].
Example 3:
Input: s = "aa"
Output: 1
Explanation: It is impossible to split the string any further.

SOLUTION:
class Solution 
{
    public int maxUniqueSplit(String s) 
    {
        return maxUnique(s,new HashSet<String>());
    }
    public int maxUnique(String S, Set<String> set)
    {
        int max=0;
        for (int i = 1; i <= S.length(); i++) 
        {
            String tmp = S.substring(0, i);
            if (!set.contains(tmp)) 
            {
                set.add(tmp);
                max = Math.max(max, maxUnique(S.substring(i), set)+ 1);
                set.remove(tmp);
            }
        }
        return max;
    }
}
