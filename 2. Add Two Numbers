You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order, and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list.
You may assume the two numbers do not contain any leading zero, except the number 0 itself.
Example 1:
Input: l1 = [2,4,3], l2 = [5,6,4]
Output: [7,0,8]
Explanation: 342 + 465 = 807.
Example 2:
Input: l1 = [0], l2 = [0]
Output: [0]
Example 3:
Input: l1 = [9,9,9,9,9,9,9], l2 = [9,9,9,9]
Output: [8,9,9,9,0,0,0,1]

SOLUTION:
class Solution 
{
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) 
    {
        ListNode head= new ListNode(0);
        ListNode tail=head;
        int c=0;
        while(l1!=null || l2!=null ||c!=0)
        {
            int d1=(l1!=null)?l1.val:0;
            int d2=(l2!=null)?l2.val:0;
            int sum=d1+d2+c;
            int d=sum%10;
            c=sum/10;
            ListNode newNode= new ListNode(d);
            tail.next=newNode;
            tail=tail.next;
            l1=(l1!=null)?l1.next:null;
            l2=(l2!=null)?l2.next:null;
        } 
        ListNode r=head.next;
        head.next=null;
        return r;       
    }
}
