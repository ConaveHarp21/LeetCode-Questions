Given n non-negative integers representing an elevation map where the width of each bar is 1, compute how much water it can trap after raining.
Example 1:
Input: height = [0,1,0,2,1,0,1,3,2,1,2,1]
Output: 6
Explanation: The above elevation map (black section) is represented by array [0,1,0,2,1,0,1,3,2,1,2,1]. In this case, 6 units of rain water (blue section) are being trapped.
Example 2:
Input: height = [4,2,0,3,2,5]
Output: 9

SOLUTION:
class Solution 
{
    public int trap(int[] height) 
    {
        int n = height.length;
        int[] forwardMax = new int[n];
        int[] backwardMax = new int[n];
        int maxHeight = 0;
        for (int i = 0; i < n; i++) 
        {
            forwardMax[i] = maxHeight;
            maxHeight = Math.max(maxHeight, height[i]);
        }
        maxHeight = 0;
        for (int i = n - 1; i >= 0; i--) 
        {
            backwardMax[i] = maxHeight;
            maxHeight = Math.max(maxHeight, height[i]);
        }
        int[] trappedWater = new int[n];
        for (int i = 0; i < n; i++) 
        {
            int val = Math.min(forwardMax[i], backwardMax[i]) - height[i];
            trappedWater[i] = val < 0 ? 0 : val;
        }
        int water = 0;
        for (int i = 0; i < n; i++)
            water += trappedWater[i];
        return water;
    }
}
